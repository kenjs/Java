<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.2.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">

    <!-- 扫描项目包 -->
    <context:component-scan base-package="com.cy.dctms"/>

    <!-- 载入配置文件 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="locations">
            <list>
                <value>classpath:db.properties</value>
                <value>classpath:config.properties</value>
            </list>
        </property>
    </bean>

    <bean id="propertiesReader" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations">
            <list>
                <value>classpath:db.properties</value>
                <value>classpath:config.properties</value>
            </list>
        </property>
    </bean>

    <!-- 数据库连接配置 -->
    <bean id="dataSource" class="org.apache.tomcat.dbcp.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${driver}"/>
        <property name="url" value="${url}"/>
        <property name="username" value="${username}"/>
        <property name="password" value="${password}"/>
        <property name="maxActive" value="50"/>
        <property name="maxIdle" value="20"></property>
        <property name="minIdle" value="5"></property>
        <property name="maxWait" value="60000"></property>
        <property name="validationQuery" value="select 1 from dual"/>
    </bean>

    <!-- mybatis Dao -->
    <!--<bean id="sqlSessionDao" class="com.cy.dctms.common.dao.SqlSessionDao"/>-->

    <!-- mybatis配置 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="mapperLocations" value="classpath:com/cy/dctms/common/sqlMap/t_*.xml"/>
        <property name="typeAliasesPackage" value="com.cy.dctms.common.bo,com.cy.dctms.domain"/>
    </bean>

    <!-- 事务管理器配置,单数据源事务 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 事物切入点 -->
    <aop:config proxy-target-class="true">
        <aop:advisor pointcut="execution(* com.cy.dctms.service.*.*(..))" advice-ref="txAdvice"/>
    </aop:config>

    <!-- 事物通知 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="add*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="*" read-only="false"/>
        </tx:attributes>
    </tx:advice>

    <!-- service begin -->

    <bean id="sqlSessionTemplateBatch" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
        <!--更新采用批量模式 -->
        <constructor-arg index="1" value="SIMPLE"/>
    </bean>

    <!-- 采用自动扫描方式创建Dao -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.cy.dctms.dao"/>
        <property name="annotationClass" value="org.springframework.stereotype.Repository"/>
        <property name="sqlSessionTemplateBeanName" value="sqlSessionTemplateBatch"/>
    </bean>

    <!-- 任务工作类 开始 -->

    <!--<bean id="daycountDriverUserBusiTask" class="com.cy.dctms.timeTask.DaycountDriverUserBusiTask"/>-->
    <!--<bean id="daycountWebUserBusiTask" class="com.cy.dctms.timeTask.DaycountWebUserBusiTask"/>-->
    <!--<bean id="dayCountSystemBusiTask" class="com.cy.dctms.timeTask.DayCountSystemBusiTask"/>-->
    <bean id="daycountDriverActiveTask" class="com.cy.dctms.timeTask.DaycountDriverActiveTask"/>
    <bean id="expiredCargoCleanTask" class="com.cy.dctms.timeTask.ExpiredCargoCleanTask"/>
    <bean id="dailyCheckNoteChannel" class="com.cy.dctms.timeTask.DailyCheckNoteChannel"/>
    <bean id="exportDataToExcelTask" class="com.cy.dctms.timeTask.ExportDataToExcelTask"/>
    <bean id="checkNoteChannelPerTenMinus" class="com.cy.dctms.timeTask.CheckNoteChannelPerTenMinus"/>
    <bean id="historyLocationTask" class="com.cy.dctms.timeTask.HistoryLocationTask"/>
    <bean id="driverRecentUseTimeTask" class="com.cy.dctms.timeTask.DriverRecentUseTimeTask"/>
    <bean id="marketingDriverInfoLevelTask" class="com.cy.dctms.timeTask.MarketingDriverInfoLevelTask"/>
    <!--<bean id="tf56Task" class="com.cy.dctms.timeTask.Tf56Task"/>-->
    <bean id="matchTask" class="com.cy.dctms.timeTask.MatchTask"/>
    <bean id="tf56ThreadProvider" class="com.cy.dctms.service.impl.Tf56TaskImpl" />

    <!-- 任务工作类 结束 -->

    <!-- 定义调用对象和调用对象的方法  开始-->

    <bean id="daycountDriverActiveTaskJobDetail"
          class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <ref bean="daycountDriverActiveTask"/>
        </property>
        <property name="targetMethod">
            <value>execute</value>
        </property>
        <property name="concurrent" value="false"/>
    </bean>

    <!--<bean id="daycountDriverUserBusiJobDetail"
          class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <ref bean="daycountDriverUserBusiTask"/>
        </property>
        <property name="targetMethod">
            <value>execute</value>
        </property>
        <property name="concurrent" value="false"/>
    </bean>-->

    <!--<bean id="daycountWebUserBusiJobDetail"
          class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <ref bean="daycountWebUserBusiTask"/>
        </property>
        <property name="targetMethod">
            <value>execute</value>
        </property>
        <property name="concurrent" value="false"/>
    </bean>-->

    <!--<bean id="dayCountSystemBusiJobDetail"
          class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        &lt;!&ndash; 调用的类 &ndash;&gt;
        <property name="targetObject">
            <ref bean="dayCountSystemBusiTask"/>
        </property>
        &lt;!&ndash; 调用类中的方法 &ndash;&gt;
        <property name="targetMethod">
            <value>execute</value>
        </property>
        &lt;!&ndash; 是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程 &ndash;&gt;
        <property name="concurrent" value="false"/>
    </bean>-->

    <!--<bean id="dailyCheckNoteChannelJobDetail"
          class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <ref bean="dailyCheckNoteChannel"/>
        </property>
        <property name="targetMethod">
            <value>checkNoteChannel</value>
        </property>
        <property name="concurrent" value="false"/>
    </bean>-->

    <bean id="checkNoteChannelPerTenMinusJobDetail"
          class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <ref bean="checkNoteChannelPerTenMinus"/>
        </property>
        <property name="targetMethod">
            <value>execute</value>
        </property>
        <property name="concurrent" value="false"/>
    </bean>

    <!-- 过期货源清理 -->
    <!--<bean id="expiredCargoCleanJobDetail"
          class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <ref bean="expiredCargoCleanTask"/>
        </property>
        <property name="targetMethod">
            <value>execute</value>
        </property>
        <property name="concurrent" value="false"/>
    </bean>-->

    <!-- 历史位置信息 -->
    <!--<bean id="historyLocationTaskJobDetail"
          class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        &lt;!&ndash; 调用的类 &ndash;&gt;
        <property name="targetObject">
            <ref bean="historyLocationTask"/>
        </property>
        &lt;!&ndash; 调用类中的方法 &ndash;&gt;
        <property name="targetMethod">
            <value>execute</value>
        </property>
        &lt;!&ndash; 是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程 &ndash;&gt;
        <property name="concurrent" value="false"/>
    </bean>-->

    <!-- 导出畅宇订单数据到Excel -->
    <!--<bean id="exportDataToExcelTaskJobDetail"
          class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <ref bean="exportDataToExcelTask"/>
        </property>
        <property name="targetMethod">
            <value>execute</value>
        </property>
        <property name="concurrent" value="false"/>
    </bean>-->

    <bean id="driverRecentUseTimeTaskJobDetail"
          class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <ref bean="driverRecentUseTimeTask"/>
        </property>
        <property name="targetMethod">
            <value>execute</value>
        </property>
        <property name="concurrent" value="false"/>
    </bean>

    <bean id="marketingDriverInfoLevelTaskJobDetail"
          class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <ref bean="marketingDriverInfoLevelTask"/>
        </property>
        <property name="targetMethod">
            <value>execute</value>
        </property>
        <property name="concurrent" value="false"/>
    </bean>

    <!--<bean id="tf56TaskJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">-->
    <!--<property name="targetObject">-->
    <!--<ref bean="tf56Task"/>-->
    <!--</property>-->
    <!--<property name="targetMethod">-->
    <!--<value>execute</value>-->
    <!--</property>-->
    <!--<property name="concurrent" value="false"/>-->
    <!--</bean>-->

    <bean id="matchTaskJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <ref bean="matchTask"/>
        </property>
        <property name="targetMethod">
            <value>execute</value>
        </property>
        <property name="concurrent" value="false"/>
    </bean>
    <!-- 定义调用对象和调用对象的方法  结束-->

    <!-- *********************************************** 触发器开始 **********************************  -->

    <!-- 司机存活与活跃数据按天统计定时任务 -->
    <bean id="daycountDriverActiveTaskJobDetailCronTrigger"
          class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail">
            <ref bean="daycountDriverActiveTaskJobDetail"/>
        </property>
        <property name="cronExpression">
            <value>0 0 1 * * ?</value>
            <!-- 每天1:0:0执行一次 -->
        </property>
    </bean>
    <!-- 司机业务数据按天统计定时器 -->
    <!--<bean id="daycountDriverUserBusiJobDetailCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail">
            <ref bean="daycountDriverUserBusiJobDetail"/>
        </property>
        <property name="cronExpression">
            <value>0 0 2 * * ?</value>
            &lt;!&ndash; 每天2:0:0执行一次 &ndash;&gt;
        </property>
    </bean>-->
    <!-- 企业用户业务数据按天统计定时器 -->
    <!--<bean id="daycountWebUserBusiJobDetailCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail">
            <ref bean="daycountWebUserBusiJobDetail"/>
        </property>
        <property name="cronExpression">
            <value>0 30 1 * * ?</value>
            &lt;!&ndash; 每天1:30:0执行一次 &ndash;&gt;
        </property>
    </bean>-->
    <!-- 系统业务数据按天统计定时任务(该定时器必须在司机存活与活跃数据定时任务执行完成后执行，因为有数据需要从那边获取) -->
    <!--<bean id="dayCountSyatemBusiCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail">
            <ref bean="dayCountSystemBusiJobDetail"/>
        </property>
        &lt;!&ndash; cron表达式 &ndash;&gt;
        <property name="cronExpression">
            <value>0 30 2 * * ?</value>
            &lt;!&ndash; 每天2:30:0执行一次 &ndash;&gt;
        </property>
    </bean>-->

    <!-- 测试短信通道 -->
    <!--<bean id="dailyCheckNoteChannelCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail">
            <ref bean="dailyCheckNoteChannelJobDetail"/>
        </property>
        &lt;!&ndash; cron表达式 &ndash;&gt;
        <property name="cronExpression">
            <value>0 50 5 * * ?</value>
            &lt;!&ndash; 每天5:50:0执行一次 &ndash;&gt;
        </property>
    </bean>-->

    <!-- 注册短信通知定时检测 -->
    <bean id="checkNoteChannelPerTenMinusCronTrigger"
          class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail">
            <ref bean="checkNoteChannelPerTenMinusJobDetail"/>
        </property>
        <property name="cronExpression">
            <value>0 0/10 * * * ?</value>
            <!-- 每十分钟执行一次 -->
        </property>
    </bean>

    <!-- 失效货源清理定时任务 -->
    <!--<bean id="expiredCargoCleanJobDetailCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail">
            <ref bean="expiredCargoCleanJobDetail"/>
        </property>
        &lt;!&ndash; cron表达式 &ndash;&gt;
        <property name="cronExpression">
            <value>0 0 3 * * ?</value>
            &lt;!&ndash; 每天3:0:0执行一次 &ndash;&gt;
        </property>
    </bean>-->

    <!-- 历史位置信息数据迁移 -->
    <!--<bean id="historyLocationTaskCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail">
            <ref bean="historyLocationTaskJobDetail"/>
        </property>
        <property name="cronExpression">
            <value>0 0 3 * * ?</value>
            &lt;!&ndash; 每日凌晨3点执行 &ndash;&gt;
        </property>
    </bean>-->

    <!-- 导出畅宇订单数据到Excel -->
    <!--<bean id="exportDataToExcelTaskCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail">
            <ref bean="exportDataToExcelTaskJobDetail" />
        </property>
        <property name="cronExpression">
            <value>0 00 17 1/10 * ?</value>&lt;!&ndash; 导出时间 &ndash;&gt;
        </property>
    </bean>-->

    <!-- APP最近使用时间 -->
    <bean id="driverRecentUseTimeTaskCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail">
            <ref bean="driverRecentUseTimeTaskJobDetail"/>
        </property>
        <property name="cronExpression">
            <value>0 0 0/2 * * ?</value>
            <!-- 每两小时1次 -->
        </property>
    </bean>

    <!-- 司机等级 -->
    <bean id="marketingDriverInfoLevelTaskCronTrigger"
          class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail">
            <ref bean="marketingDriverInfoLevelTaskJobDetail"/>
        </property>
        <property name="cronExpression">
            <value>0 0 4 * * ?</value>
            <!-- 每天4点开始 -->
        </property>
    </bean>

    <!-- 最新货源（爬虫抓取的）匹配短信或推送的轮循发送 -->
    <bean id="matchTaskCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail">
            <ref bean="matchTaskJobDetail"/>
        </property>
        <property name="cronExpression">
            <value>0 0/3 7-20 * * ?</value>
            <!-- 7点至20点每3分钟一次 -->
        </property>
    </bean>
    <!-- ************************************************* 触发器结束 ********************************** -->

    <!-- 总管理类 如果将lazy-init='false'那么容器启动就会执行调度程序  -->
    <bean lazy-init="false" class="org.springframework.scheduling.quartz.SchedulerFactoryBean" destroy-method="destroy">
        <property name="triggers">
            <!--  触发器列表 -->
            <list>
                <!-- 统计数据类 -->
                <ref local="daycountDriverActiveTaskJobDetailCronTrigger"/>
                <!--<ref local="daycountDriverUserBusiJobDetailCronTrigger"/>
                <ref local="daycountWebUserBusiJobDetailCronTrigger"/>
                <ref local="dayCountSyatemBusiCronTrigger"/>-->

                <!-- 短信通道检查类 -->
                <!--<ref local="dailyCheckNoteChannelCronTrigger"/>-->
                <ref local="checkNoteChannelPerTenMinusCronTrigger"/>

                <!-- 数据迁移类 -->
                <!--<ref local="expiredCargoCleanJobDetailCronTrigger"/>-->
                <!-- 历史定位数据迁移的逻辑目前是错误的，千万不能打开 -->
                <!--<ref local="historyLocationTaskCronTrigger"/>-->
                <!--<ref local="exportDataToExcelTaskCronTrigger" />-->

                <!-- 营销平台辅助作业类 -->
                <ref local="driverRecentUseTimeTaskCronTrigger"/>
                <ref local="marketingDriverInfoLevelTaskCronTrigger"/>

                <!-- 爬虫辅助作业类 -->
                <ref local="matchTaskCronTrigger"/>
            </list>
        </property>
    </bean>

</beans>